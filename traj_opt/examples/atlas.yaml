##
#
# This file contains parameters defining an optimization problem for the atlas humanoid,
#
##

# Initial state
q_init : [1,0,0,0,        # base orientation
          0,0,0.85,          # base position
          0,0.1,0,          # torso
          0,0,0,0,0,0,0,  # left arm
          0,              # head
          0,0,0,0,0,0,0,  # right arm
          0,0,-0.5,1.0,-0.5,0,    # left leg
          0,0,-0.5,1.0,-0.5,0]    # right leg
v_init : [0,0,0,
          0,0,0,
          0,0.1,0,
          0,0,0,0,0,0,0,
          0,
          0,0,0,0,0,0,0,
          0,0,0,0,0,0,
          0,0,0,0,0,0]

# Target state
q_nom_start : [1,0,0,0,
               0,0,0.85,
               0,0.1,0,
               0,0,0,0,0,0,0,
               0,
               0,0,0,0,0,0,0,
               0,0,-0.5,1.0,-0.5,0,
               0,0,-0.5,1.0,-0.5,0]
q_nom_end : [1,0,0,0,
             0,0,0.85,
             0,0.1,0,
             0,0,0,0,0,0,0,
             0,
             0,0,0,0,0,0,0,
             0,0,-0.5,1.0,-0.5,0,
             0,0,-0.5,1.0,-0.5,0]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [1,0,0,0,
           0,0,0.85,
           0,0.1,0,
           0,0,0,0,0,0,0,
           0,
           0,0,0,0,0,0,0,
           0,0,-0.5,1.0,-0.5,0,
           0,0,-0.5,1.0,-0.5,0]

# Cost Weights
Qq : [1e+1,1e+1,1e+1,1e+1,          # base orientation
      1e+0,1e+0,1e+0,               # base position
      0e0,0e0,0e0,                  # torso
      0e0,0e0,0e0,0e0,0e0,0e0,0e0,  # left arm
      0e0,                          # head
      0e0,0e0,0e0,0e0,0e0,0e0,0e0,  # right arm
      0e0,0e0,0e0,0e0,0e0,0e0,      # left leg
      0e0,0e0,0e0,0e0,0e0,0e0]      # right leg
Qv : [1e1,1e1,1e1,
      1e1,1e1,1e1,
      1e1,1e1,1e1,
      1e1,1e1,1e1,1e1,1e1,1e1,1e1,
      1e1,
      1e1,1e1,1e1,1e1,1e1,1e1,1e1,
      1e1,1e1,1e1,1e1,1e1,1e1,
      1e1,1e1,1e1,1e1,1e1,1e1]
R : [1e+3,1e+3,1e+3,
     1e+3,1e+3,1e+3,
     1e0,1e0,1e0,
     1e0,1e0,1e0,1e0,1e0,1e0,1e0,
     1e0,
     1e0,1e0,1e0,1e0,1e0,1e0,1e0,
     1e0,1e0,1e0,1e0,1e0,1e0,
     1e0,1e0,1e0,1e0,1e0,1e0]

Qfq : [1e+1,1e+1,1e+1,1e+1,          # base orientation
       1e+0,1e+0,1e+0,               # base position
       0e0,0e0,0e0,                  # torso
       0e0,0e0,0e0,0e0,0e0,0e0,0e0,  # left arm
       0e0,                          # head
       0e0,0e0,0e0,0e0,0e0,0e0,0e0,  # right arm
       0e0,0e0,0e0,0e0,0e0,0e0,      # left leg
       0e0,0e0,0e0,0e0,0e0,0e0]      # right leg
Qfv : [1e-1,1e-1,1e-1,
       1e-1,1e-1,1e-1,
       1e-1,1e-1,1e-1,
       1e-1,1e-1,1e-1,1e-1,1e-1,1e-1,1e-1,
       1e-1,
       1e-1,1e-1,1e-1,1e-1,1e-1,1e-1,1e-1,
       1e-1,1e-1,1e-1,1e-1,1e-1,1e-1,
       1e-1,1e-1,1e-1,1e-1,1e-1,1e-1]

# Problem definition parameters
time_step : 0.05    # Discretization timestep (seconds)
num_steps : 40      # number of timesteps

# Solver parameters
max_iters : 500           # maximum Gauss-Newton iterations
method : "linesearch"     # solver method, {linesearch, trust_region}
tolerances:
  rel_cost_reduction: 1e-6
  abs_cost_reduction: 1e-12
  rel_gradient_along_dq: 1e-6
  abs_gradient_along_dq: 1e-12
  rel_state_change: 1e-6
  abs_state_change: 1e-12

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "autodiff"

# Playback/visualization parameters
play_target_trajectory : true
play_initial_guess : true
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters
F : 100.0       # force at delta meters of penetration
delta : 0.01  # penetration distance with F newtons of normal force
stiffness_exponent : 1      # Compliant law exponent.
dissipation_exponent : 1.0  # Hunt & Crossley-like model. Law exponent.
dissipation_velocity : 0.01  # Hunt & Crossley-like model parameter, in m/s.

# Friction
friction_coefficient : 0.5  # Coefficient of friction.
stiction_velocity: 0.05     # Regularization velocity, in m/s.
