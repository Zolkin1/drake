#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
import os
import sys

##
#
# Quick script to make a plot of linesearch residuals
# that we saved from a particular iteration
#
# This script must be run from the "drake/" directory. 
#
##

# drake/ directory, contains drake/bazel-out symlink
drake_root = os.getcwd()

if len(sys.argv) == 1:
    # No iteration specified, use the last iteration
    filename = "linesearch_data.csv"
elif len(sys.argv) == 2:
    # iteration specified
    filename = f"linesearch_data_{sys.argv[1]}.csv"
else:
    print("Usage: python plot_linesearch_residual.py [iteration_number]")
    sys.exit()

# This file is generated by TrajectoryOptimizer::SaveLinesearchResidual, which
# is not called by TrajectoryOptimizer::Solve by default. The only way it will
# exist is if either (1) linesearch fails or (2) you edit 
# TrajectoryOptimizer::Solve to save the linesearch residual at a particular
# iteration.
data_file = drake_root + "/bazel-out/k8-opt/bin/traj_opt/examples/hopper.runfiles/drake/" + filename
data = np.genfromtxt(data_file, delimiter=',', names=True)
alpha = data["alpha"]
cost = data["cost"]
gradient = data["gradient"]
L_prime = data["L_prime"]
dq = data["dq"]

fig, ax = plt.subplots(2,1,sharex=True)

ax[0].plot(alpha, cost)
ax[0].axvline(0.0, linestyle='--', color='grey', linewidth=1)
ax[0].axvline(1.0, linestyle='--', color='grey', linewidth=1)
ax[0].set_xlabel(r"Linesearch Parameter $\alpha$")
ax[0].set_ylabel(r"Cost $L(q+\alpha\Delta q) - L(q)$")

#plt.figure()
#plt.plot(alpha, gradient)
#plt.axvline(0.0, linestyle='--', color='grey', linewidth=1)
#plt.axvline(1.0, linestyle='--', color='grey', linewidth=1)
#plt.xlabel(r"Linesearch Parameter $\alpha$")
#plt.ylabel(r"Norm of Gradient $\|g\|$")

ax[1].plot(alpha, L_prime)
ax[1].axvline(0.0, linestyle='--', color='grey', linewidth=1)
ax[1].axvline(1.0, linestyle='--', color='grey', linewidth=1)
ax[1].axhline(0.0, linestyle='--', color='grey', linewidth=1)
ax[1].set_xlabel(r"Linesearch Parameter $\alpha$")
ax[1].set_ylabel(r"$L' = g' \Delta q$")

plt.show()

